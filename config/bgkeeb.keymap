// used swweeep default keymap

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&lt { tapping-term-ms = <150>; };

/ {
    combos {
        compatible = "zmk,combos";

        a1 {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <13 12>;
        };

        a2 {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
        };

        b1 {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <12 11>;
        };

        b2 {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <17 18>;
        };

        c1 {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 22>;
        };

        c2 {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 27>;
        };

        d1 {
            bindings = <&kp BACKSLASH>;
            key-positions = <14 13>;
        };

        d2 {
            bindings = <&kp SLASH>;
            key-positions = <15 16>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <14 15>;
        };

        get_bt {
            bindings = <&mo 7>;
            key-positions = <36 31>;
        };

        e1 {
            bindings = <&kp LESS_THAN>;
            key-positions = <21 22>;
        };

        e2 {
            bindings = <&kp GREATER_THAN>;
            key-positions = <27 28>;
        };

        esq_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
        };

        del_combo {
            bindings = <&kp DELETE>;
            key-positions = <7 6>;
        };

        rus_letter_1 {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <6 9>;
        };

        rus_letter_2 {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <16 19>;
        };

        rus_letter_3 {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <26 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp Q             &kp W             &kp E                  &kp R                 &kp T          &kp Y        &kp U                  &kp I                &kp O              &kp P
&mt LEFT_GUI A    &mt LEFT_ALT S    &mt LEFT_SHIFT D       &mt LEFT_CONTROL F    &kp G          &kp H        &mt RIGHT_CONTROL J    &mt RIGHT_SHIFT K    &mt RIGHT_ALT L    &mt RIGHT_GUI SEMICOLON
&kp Z             &kp X             &kp C                  &kp V                 &kp B          &kp N        &kp M                  &kp COMMA            &kp DOT            &kp FSLH
                  &none             &mt LEFT_GUI ESCAPE    &lt 5 TAB             &lt 4 SPACE    &kp ENTER    &kp BACKSPACE          &lt 6 DELETE         &none
            >;
        };

        alt {
            bindings = <
&kp Q             &kp W             &kp F                  &kp P                 &kp B          &kp J        &kp L                  &kp U                &kp Y              &kp SEMI
&mt LEFT_GUI A    &mt LEFT_ALT R    &mt LEFT_SHIFT S       &mt LEFT_CONTROL T    &kp G          &kp M        &mt RIGHT_CONTROL N    &mt RIGHT_SHIFT E    &mt RIGHT_ALT I    &mt RIGHT_GUI O
&kp Z             &kp X             &kp C                  &kp D                 &kp V          &kp K        &kp H                  &kp COMMA            &kp DOT            &kp FSLH
                  &trans            &mt LEFT_GUI ESCAPE    &lt 5 TAB             &lt 4 SPACE    &kp ENTER    &kp BACKSPACE          &lt 6 DELETE         &trans
            >;
        };

        mac {
            bindings = <
&kp Q                 &kp W             &kp E                  &kp R             &kp T          &kp Y        &kp U                  &kp I                &kp O              &kp P
&mt LEFT_CONTROL A    &mt LEFT_ALT S    &mt LEFT_SHIFT D       &mt LEFT_GUI F    &kp G          &kp H        &mt RIGHT_COMMAND J    &mt RIGHT_SHIFT K    &mt RIGHT_ALT L    &mt RIGHT_CONTROL SEMICOLON
&kp Z                 &kp X             &kp C                  &kp V             &kp B          &kp N        &kp M                  &kp COMMA            &kp DOT            &kp FSLH
                      &none             &mt LEFT_GUI ESCAPE    &lt 5 TAB         &lt 4 SPACE    &kp ENTER    &kp BACKSPACE          &lt 6 DELETE         &none
            >;
        };

        game {
            bindings = <
&kp ESC             &kp Q     &kp W     &kp E        &kp R        &kp T        &kp Y        &kp U           &kp I        &kp O
&kp LEFT_SHIFT      &kp A     &kp S     &kp D        &kp F        &kp G        &kp H        &kp J           &kp K        &kp L
&kp LEFT_CONTROL    &kp Z     &kp X     &kp C        &kp V        &kp B        &kp N        &kp M           &kp COMMA    &kp DOT
                    &trans    &trans    &lt 5 TAB    &kp SPACE    &mkp LCLK    &mkp RCLK    &lt 6 ESCAPE    &trans
            >;
        };

        nav {
            bindings = <
&kp ESC         &mkp RCLK         &mmv MOVE_UP      &mkp LCLK          &msc SCRL_UP      &kp HOME          &kp PAGE_DOWN     &kp PAGE_UP      &kp END            &kp LEFT_BRACKET
&mkp MCLK       &mmv MOVE_LEFT    &mmv MOVE_DOWN    &mmv MOVE_RIGHT    &msc SCRL_DOWN    &kp LEFT_ARROW    &kp DOWN_ARROW    &kp UP_ARROW     &kp RIGHT_ARROW    &kp SINGLE_QUOTE
&kp CAPSLOCK    &kp LG(F2)        &kp LG(F1)        &kp LG(F3)         &kp CAPSLOCK      &kp LG(N)         &kp LS(LC(C))     &kp LC(LS(V))    &kp INSERT         &kp RIGHT_BRACKET
                &none             &none             &none              &trans            &mkp LCLK         &mkp MCLK         &mkp RCLK        &none
            >;
        };

        sym {
            bindings = <
&kp NUMBER_4    &kp NUMBER_2    &kp NUMBER_3         &kp NUMBER_1     &kp NUMBER_5     &kp NUMBER_6    &kp NUMBER_0           &kp NUMBER_8     &kp NUMBER_9    &kp NUMBER_7
&kp CARET       &kp TILDE       &kp DOUBLE_QUOTES    &kp COLON        &kp AMPERSAND    &kp PLUS        &kp MINUS              &kp ASTERISK     &kp AT_SIGN     &kp EXCLAMATION
&kp CAPSLOCK    &kp GRAVE       &kp SINGLE_QUOTE     &kp SEMICOLON    &kp DOLLAR       &kp EQUAL       &kp UNDERSCORE         &kp HASH         &kp PERCENT     &kp QUESTION
                &none           &none                &trans           &none            &kp PIPE        &mt LCTRL BACKSPACE    &kp BACKSLASH    &none
            >;
        };

        func {
            bindings = <
&kp F4        &kp F2        &kp F3         &kp F1               &kp F5                  &kp F6               &kp F10       &kp F8         &kp F9               &kp F7
&tog 1        &tog 2        &tog 3         &kp LG(F12)          &kp C_BRIGHTNESS_INC    &kp C_VOL_UP         &kp LG(F9)    &kp LG(F8)     &kp LG(F7)           &kp F11
&kp LG(F6)    &kp LG(F5)    &kp LG(F11)    &kp LG(SEMICOLON)    &kp C_BRIGHTNESS_DEC    &kp C_VOLUME_DOWN    &kp C_MUTE    &kp LG(F10)    &kp LG(SEMICOLON)    &kp F12
              &none         &none          &none                &none                   &none                &none         &trans         &none
            >;
        };

        bt {
            bindings = <
&none    &none    &none    &none           &none           &none         &bt BT_PRV      &bt BT_NXT      &none           &bootloader
&none    &none    &none    &none           &kp NUMBER_1    &none         &none           &none           &none           &none
&none    &none    &none    &none           &none           &bt BT_CLR    &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3
         &none    &none    &out OUT_USB    &none           &none         &out OUT_BLE    &none           &none
            >;
        };
    };
};

в него нужно добавить
&default_behavior_manager {
    behaviors {
        unicode: unicode {
            compatible = "zmk,behavior-unicode";
            #binding-cells = <1>;
        };
    };
};
